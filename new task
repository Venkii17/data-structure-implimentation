#include <stdio.h>
#include <stdlib.h>

// -------------------------- Linked List --------------------------

typedef struct LinkedListNode {
    int data;
    struct LinkedListNode* next;
} LinkedListNode;

void insertLinkedList(LinkedListNode** head, int value) {
    LinkedListNode* newNode = (LinkedListNode*)malloc(sizeof(LinkedListNode));
    newNode->data = value;
    newNode->next = NULL;
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    LinkedListNode* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void deleteLinkedList(LinkedListNode** head, int value) {
    LinkedListNode* temp = *head;
    LinkedListNode* prev = NULL;
    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) return; // Value not found
    if (prev == NULL) *head = temp->next;
    else prev->next = temp->next;
    free(temp);
}

void traverseLinkedList(LinkedListNode* head) {
    LinkedListNode* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// -------------------------- Binary Search Tree --------------------------

typedef struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

TreeNode* createTreeNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

TreeNode* insertBST(TreeNode* root, int value) {
    if (root == NULL) return createTreeNode(value);
    if (value < root->data) root->left = insertBST(root->left, value);
    else if (value > root->data) root->right = insertBST(root->right, value);
    return root;
}

void inorderTraversal(TreeNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// -------------------------- Graph (Adjacency List) --------------------------

typedef struct GraphNode {
    int vertex;
    struct GraphNode* next;
} GraphNode;

typedef struct Graph {
    int numVertices;
    GraphNode** adjLists;
} Graph;

Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjLists = (GraphNode**)malloc(vertices * sizeof(GraphNode*));
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    GraphNode* newNode = (GraphNode*)malloc(sizeof(GraphNode));
    newNode->vertex = dest;
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

void printGraph(Graph* graph) {
    for (int i = 0; i < graph->numVertices; i++) {
        GraphNode* temp = graph->adjLists[i];
        printf("Vertex %d: ", i);
        while (temp) {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// -------------------------- Main Function --------------------------

int main() {
    // Linked List
    printf("Linked List Operations:\n");
    LinkedListNode* linkedListHead = NULL;
    insertLinkedList(&linkedListHead, 10);
    insertLinkedList(&linkedListHead, 20);
    insertLinkedList(&linkedListHead, 30);
    traverseLinkedList(linkedListHead);
    deleteLinkedList(&linkedListHead, 20);
    traverseLinkedList(linkedListHead);

    // Binary Search Tree
    printf("\nBinary Search Tree Operations:\n");
    TreeNode* bstRoot = NULL;
    bstRoot = insertBST(bstRoot, 50);
    bstRoot = insertBST(bstRoot, 30);
    bstRoot = insertBST(bstRoot, 70);
    printf("In-order Traversal: ");
    inorderTraversal(bstRoot);
    printf("\n");

    // Graph
    printf("\nGraph Operations:\n");
    Graph* graph = createGraph(5);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    printGraph(graph);

    return 0;
}
